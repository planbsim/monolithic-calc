Coco-2 PGT (source: .\Calc.atg)

    1| COMPILER Calc
    2| 
    3| SEM<<
    4|   public static int LastCalcResult = 0;
    5| 
    6|   // addition
    7|   public static int Add(int a, int b) {
    8|     return a + b;
    9|   } 
   10| 
   11|   // substraction
   12|   public static int Sub(int a, int b) {
   13|     return a - b;
   14|   }
   15| 
   16|   // multiplication 
   17|   public static int Mult(int a, int b) {
   18|     return a * b;
   19|   }
   20| 
   21|   // division
   22|   public static int Div(int a, int b) {
   23|     return a / b;
   24|   }
   25| >>
   26| 
   27| CHARACTER SETS
   28|   digit      = '0' .. '9'.
   29|   whiteSpace = CHR(9) + EOL IGNORE. /*' ' ignored by default*/ 
   30| 
   31| TOKENS                      
   32|   '+'.  '-'.  '*'.  '/'.  '('.  ')'.
   33| 
   34| TOKEN CLASSES           
   35|   number<<out int n>> = 
   36|     digit { digit }      LEX<<n = Convert.ToInt32(tokenStr);>>.
   37| 
   38| NONTERMINALS
   39|   Calc.
   40|   Expr<<out int e>>.
   41|   Term<<out int t>>.
   42|   Fact<<out int f>>.
   43| 
   44| RULES
   45| 
   46|   Calc =                 LOCAL<<int e = 0;>> 
   47|     Expr<<out e>>        SEM<<Console.WriteLine(e); LastCalcResult = e; >>.  
   48|     
   49|   Expr<<out int e>> =    LOCAL<<int t = 0; e = 0;>> 
   50|     Term<<out e>>             
   51|     { '+' Term<<out t>>  SEM<<e = Add(e, t);>>
   52|     | '-' Term<<out t>>  SEM<<e = Sub(e, t);>>
   53|     }.
   54|     
   55|   Term<<out int t>> =    LOCAL<<int f = 0; t = 0;>>
   56|     Fact<<out t>>
   57|     { '*' Fact<<out f>>  SEM<<t = Mult(t, f);>>
   58|     | '/' Fact<<out f>>  SEM<<t = Div(t, f);>>
   59|     }.
   60|     
   61|   Fact<<out int f>> =    LOCAL <<f = 0;>>
   62|       number<<out f>>
   63|     | '(' Expr<<out f>> ')'.
   64| 
   65| END Calc.


error(s) and warning(s):
-----------------------

    0 lexical error(s) 
    0 syntax error(s)  
    0 semantic error(s)
    0 warning(s)       


statistics:
----------

    7 terminals
    4 nonterminals
    9 alternatives
   19 nodes in top-down graph
    2 eps sets (with look ahead)
    1 any sets

   81 bytes G-code

grammar has no deletable nonterminals
-------------------------------------



G-code:

======

-----  Calc  -------------------------------
    1  NT     Expr                    1
    4  SEM        2
    5  RET

-----  Expr  -------------------------------
    6  NT     Term                    1
    9  TA     '+'                    20
   13  NT     Term                    2
   16  SEM        3
   17  JMP        9

   20  TA     '-'                    31
   24  NT     Term                    4
   27  SEM        5
   28  JMP        9

   31  EPS        1
   33  RET

-----  Term  -------------------------------
   34  NT     Fact                    1
   37  TA     '*'                    48
   41  NT     Fact                    2
   44  SEM        3
   45  JMP       37

   48  TA     '/'                    59
   52  NT     Fact                    4
   55  SEM        5
   56  JMP       37

   59  EPS        2
   61  RET

-----  Fact  -------------------------------
   62  TCA    number                 68   68
   67  RET

   68  T      '('
   70  NT     Expr                    2
   73  T      ')'
   75  RET

-----  R o o t  ----------------------------
   76  NT     Calc                    1
   79  T      'end of file'
   81  RET


nonterminals:
============

Calc                      1     { '(', number }
Expr                      6     { '(', number }
Term                     34     { '(', number }
Fact                     62     { '(', number }


eps look-aheads:
===============

    1   { 'end of file', ')' }
    2   { 'end of file', '+', '-', ')' }
